// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  currentProgramId String?

  fatigue          Int                @default(0)
  ExerciseTemplate ExerciseTemplate[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Program {
  id       String  @id @default(cuid())
  name     String
  comments String?
  length   Int
  days     Int

  autoRegulated Boolean @default(false)

  userId String?

  createdAt DateTime @default(now())

  weeks Week[]
}

model Week {
  id        String  @id @default(cuid())
  weekNo    Int
  programId String
  program   Program @relation(fields: [programId], references: [id])

  workouts Workout[]
}

model Workout {
  id        String @id @default(cuid())
  name      String
  workoutNo Int
  weekId    String
  week      Week   @relation(fields: [weekId], references: [id])

  exercises      Exercise[]
  MuscleFeedback MuscleFeedback[]

  nextWorkoutId     String?
  previousWorkoutId String?

  programmed Boolean @default(false)

  createdAt DateTime @default(now())

  feedbackId String?
}

model ExerciseTemplate {
  id              String       @id @default(cuid())
  name            String
  description     String?                              // cues, video URL, etc.
  isPublic        Boolean      @default(false)

  createdByUserId String?
  createdByUser   User?        @relation(fields: [createdByUserId], references: [id])

  muscleGroupId   String
  muscleGroup     MuscleGroup  @relation(fields: [muscleGroupId], references: [id])

  createdAt       DateTime     @default(now())

  instances       Exercise[]
  
  @@index([muscleGroupId])
}

model Exercise {
  id         String @id @default(cuid())
  exerciseNo Int    @default(0)

  templateId String
  template   ExerciseTemplate @relation(fields: [templateId], references: [id])

  name   String
  muscle String

  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id])

  sets Set[]

  createdAt DateTime @default(now())

  @@index([workoutId, templateId])
}

model MuscleGroup {
  id               String             @id @default(cuid())
  name             String             @unique                 
  recoveryFactor   Float                                     
  exerciseTemplates ExerciseTemplate[]                       
}

model Set {
  id         String   @id @default(cuid())
  setNo      Int
  weight     Float?
  reps       Int?
  complete   Boolean  @default(false)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  createdAt DateTime @default(now())
}

model MuscleFeedback {
  id        String   @id @default(cuid())
  workoutId String
  muscle    String
  workload  Int
  jointpain Int
  soreness  Int
  createdAt DateTime @default(now())

  workout Workout @relation(fields: [workoutId], references: [id])
}
